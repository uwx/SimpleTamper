// This code was generated by a tool.
<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<# var maxParamsString = Regex.Match(File.ReadAllText(Host.ResolvePath("ReflectWeaver.cs")), @"\/\*PARAMS_START\*\/\s*([0-9]+)\s*\/\*PARAMS_END\*\/").Groups[1].Value.Trim(); #>
// MaxParams: <#= maxParamsString #>
<# int MaxParams = int.Parse(maxParamsString); #>
using System;
using static System.Linq.Expressions.Expression;
using static HSNXT.SimpleTamper.Expressions.ExpressionsBase;

namespace HSNXT.SimpleTamper.Expressions
{
    public static partial class Callers
    {
<#
    for (var i = 1; i <= MaxParams; i++)
    {
        var range = Enumerable.Range(0, i).ToArray();
        var targs = string.Join(", ", range.Select(e => "TArg" + e));
        var argnames = string.Join(", ", range.Select(e => "arg" + e));
        var typeofs = string.Join(", ", range.Select(e => $"typeof(TArg{e})"));
        
        var Params = string.Join("\n            ", range.Select(e => $@"var arg{e} = Parameter(typeof(TArg{e}), ""arg{e}"");"));
#>
        public static Func<T, <#=targs#>, TResult> Instance<#=i#><T, <#=targs#>, TResult>(string name)
        {
            var instance = ParameterInstance<T>();
            <#=Params#>

            return Lambda<Func<T, <#=targs#>, TResult>>(
                Call(instance, name, null, <#=argnames#>), instance, <#=argnames#> // return instance.name(<#=argnames#>)
            ).Compile(); // (instance, <#=argnames#>) => ...
        }

        public static Func<<#=targs#>, TResult> Static<#=i#><T, <#=targs#>, TResult>(string name)
        {
            <#=Params#>
            
            return Lambda<Func<<#=targs#>, TResult>>(
                Call(Method<T>(name, <#=typeofs#>), <#=argnames#>), <#=argnames#> // return T.name(<#=argnames#>)
            ).Compile(); // (<#=argnames#>) => ...
        }

        public static Action<T, <#=targs#>> InstanceVoid<#=i#><T, <#=targs#>>(string name)
        {
            var instance = ParameterInstance<T>();
            <#=Params#>
            
            return Lambda<Action<T, <#=targs#>>>(
                Call(instance, name, null, <#=argnames#>), instance, <#=argnames#> // instance.name(<#=argnames#>)
            ).Compile(); // (instance, <#=argnames#>) => ...
        }

        public static Action<<#=targs#>> StaticVoid<#=i#><T, <#=targs#>>(string name)
        {
            <#=Params#>
            
            return Lambda<Action<<#=targs#>>>(
                Call(Method<T>(name, <#=typeofs#>), <#=argnames#>), <#=argnames#> // T.name(<#=argnames#>)
            ).Compile(); // (<#=argnames#>) => ...
        }
<#
    }
#>
    }
}